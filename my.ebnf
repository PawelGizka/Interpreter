PDefs.		Program	::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;

DField.	Def ::= Mod Ident "=" Exp ;

terminator Stm "" ;

MVal.		Mod ::= "val" ;
MVar.		Mod ::= "var" ;

SEAsign.	Stm ::= Ident "=" Exp ";" ;
SArrAsign.	Stm ::= Ident "[" Exp "]" "=" Exp ";" ;
SExp.		Stm ::= Exp ";" ;
SDef.		Stm ::= Def ";" ;
SInc.      	Stm ::= Ident "++"  ";" ;
SDec.      	Stm ::= Ident "--"  ";" ;
SReturnE.	Stm ::= "return" Exp ";" ;
SReturn.	Stm ::= "return" ";" ;
SWhile.		Stm ::= "while" Exp "do" Stm ;
SFor.		Stm ::= "for" "val" Ident "=" Exp "to" Exp "do" Stm ;
SForEach.	Stm ::= "for" "val" Ident ":" Ident "do" Stm ;
SBlock. 	Stm ::= "{" [Stm] "}" ;
SIf.		Stm ::= "if" Exp "then" Stm "fi";
SIfElse.	Stm ::= "if" Exp "then" Stm "else" Stm "fi";

Tbool.		Type ::= "bool" ;
Tint.		Type ::= "int" ;
Tvoid.		Type ::= "void" ;
TString.	Type ::= "string" ;
TFun.		Type ::= "fun" "(" "(" [Type] ")" "=>" Type ")" ; 
TArray.		Type ::= Type "[]" ;
separator Type "," ;

separator Arg "," ;
ADecl.		Arg ::= Mod Ident ":" Type ;	

internal EHi.	Exp9 ::= "(" Exp ")" ;

EIdent.		Exp8 ::= Ident ;
EInt. 		Exp8 ::= Integer ;
EString.	Exp8 ::= String ;
ETrue.		Exp8 ::= "true" ;
EFalse.		Exp8 ::= "false" ;
EFun.		Exp8 ::= "(" [Arg] ")" ":" Type "=>" Stm ;
EAppFun.	Exp8 ::= Ident "(" [Exp] ")" ;
EArrIni.	Exp8 ::= "new" Type "[" Exp "]" ;
EArrLen.	Exp8 ::= Ident ".length" ;
EArrAcc.	Exp8 ::= Ident "[" Exp "]" ;

ENeg.		Exp7 ::= "-" Exp8 ;

EMul. 		Exp6 ::= Exp6 "*" Exp7 ;
EDiv.		Exp6 ::= Exp6 "/" Exp7 ;
EPlus. 		Exp5 ::= Exp5 "+" Exp6 ;
EMinus. 	Exp5 ::= Exp5 "-" Exp6 ;

ENot.		Exp4 ::= "!" Exp5 ;
ELt.		Exp3 ::= Exp3 ">" Exp4 ;
EGt.		Exp3 ::= Exp3 "<" Exp4 ;
EGtEq.		Exp3 ::= Exp3 ">=" Exp4 ;
ELtEq.		Exp3 ::= Exp3 "<=" Exp4 ;
EEq.		Exp2 ::= Exp2 "==" Exp3 ;
ENeq.		Exp2 ::= Exp2 "!=" Exp3 ;
EAnd.      	Exp1 ::= Exp1 "&&" Exp2 ;
EOr.       	Exp ::= Exp "||" Exp1 ;	

coercions Exp 9 ;
separator Exp "," ;
