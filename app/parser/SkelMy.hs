module SkelMy where

-- Haskell module generated by the BNF converter

import AbsMy
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DField mod ident exp -> failure x
transMod :: Mod -> Result
transMod x = case x of
  MVal -> failure x
  MVar -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SEAsign ident exp -> failure x
  SArrAsign ident exp1 exp2 -> failure x
  SExp exp -> failure x
  SDef def -> failure x
  SInc ident -> failure x
  SDec ident -> failure x
  SReturnE exp -> failure x
  SReturn -> failure x
  SWhile exp stm -> failure x
  SFor ident exp1 exp2 stm -> failure x
  SForEach ident1 ident2 stm -> failure x
  SBlock stms -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
transType :: Type -> Result
transType x = case x of
  Tbool -> failure x
  Tint -> failure x
  Tvoid -> failure x
  TString -> failure x
  TFun types type_ -> failure x
  TArray type_ -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl mod ident type_ -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EHi exp -> failure x
  EIdent ident -> failure x
  EInt integer -> failure x
  EString string -> failure x
  ETrue -> failure x
  EFalse -> failure x
  EFun args type_ stm -> failure x
  EAppFun ident exps -> failure x
  EArrIni type_ exp -> failure x
  EArrLen ident -> failure x
  EArrAcc ident exp -> failure x
  ENeg exp -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EPlus exp1 exp2 -> failure x
  EMinus exp1 exp2 -> failure x
  ENot exp -> failure x
  ELt exp1 exp2 -> failure x
  EGt exp1 exp2 -> failure x
  EGtEq exp1 exp2 -> failure x
  ELtEq exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENeq exp1 exp2 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x

