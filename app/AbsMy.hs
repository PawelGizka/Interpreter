

module AbsMy where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DField Mod Ident Exp
  deriving (Eq, Ord, Show, Read)

data Mod = MVal | MVar
  deriving (Eq, Ord, Show, Read)

data Stm
    = SEAsign Ident Exp
    | SArrAsign Ident Exp Exp
    | SExp Exp
    | SDef Def
    | SInc Ident
    | SDec Ident
    | SReturnE Exp
    | SReturn
    | SWhile Exp Stm
    | SFor Ident Exp Exp Stm
    | SForEach Ident Ident Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data Type
    = Tbool | Tint | Tvoid | TString | TFun [Type] Type | TArray Type
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Mod Ident Type
  deriving (Eq, Ord, Show, Read)

data Exp
    = EHi Exp
    | EIdent Ident
    | EInt Integer
    | EString String
    | ETrue
    | EFalse
    | EFun [Arg] Type Stm
    | EAppFun Ident [Exp]
    | EArrIni Type Exp
    | EArrLen Ident
    | EArrAcc Ident Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ENot Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | EGtEq Exp Exp
    | ELtEq Exp Exp
    | EEq Exp Exp
    | ENeq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
  deriving (Eq, Ord, Show, Read)

